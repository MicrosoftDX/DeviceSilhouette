//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Silhouette.LoadTest
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Microsoft.VisualStudio.TestTools.WebTesting;
    using DeviceSimulator;
    using System.IO;
    using System.Resources;
    using System.Diagnostics;

    [DeploymentItem(@"TestState.json", "")]
    [DeploymentItem(@"TestStateUpdated.json", "")]
    public class SilhouetteDeviceLoadTest : WebTest
    {
        DeviceSimulator _device;
        string _testState;
        string _testStateUpdated;
        string _deviceId;
        string _connectionString;
        WebTestRequest _request;

        public SilhouetteDeviceLoadTest()
        {
            this.PreAuthenticate = true;
            this.Proxy = "default";


           this.
            _testState = File.ReadAllText("TestState.json");
            _testStateUpdated = File.ReadAllText("TestStateUpdated.json");
            //Non-existing URL to force WebTest result (404), so we can a use the WebTest icw IoTHub
            _request = new WebTestRequest("http://localhost/deviceloadtest");
            _request.ExpectedHttpStatusCode = 404;

        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            _connectionString = (string)this.Context["IoTHubConnectionString"];

            _deviceId = "TestDevice-" + this.Context.WebTestUserId;

            Debug.WriteLine("State Report for Device: " + _deviceId);

            _device = new DeviceSimulator(_connectionString, _deviceId);
            _device.InitializeAsync().Wait();

            //if (((Microsoft.VisualStudio.TestTools.LoadTesting.LoadTestUserContext)(this.Context["$LoadTestUserContext"])).IsNewUser)
            // if (this.Context.IsNewUser)
           // {

                _device.SendStateMessageAsync(_testState);

            //}
            //else
            //{
            //    _device.SendStateMessageAsync(_testStateUpdated);
            //}

            yield return _request;
        }
    }
}
